version: 2.1

executors:
  fed-executor:
    docker:
      - image: openjdk:8-jdk
    environment:
      _JAVA_OPTIONS: "-Xmx3G -Xms2G"
    working_directory: /app
    resource_class: medium+
  
  sonarqube-executor:
    docker:
      - image: openjdk:11-jdk
    working_directory: /app
    resource_class: medium+

jobs:
  clone_rskj_repo:
    executor: fed-executor
    steps:
      - checkout
      - run:
          name: Setup
          command: apt update -y && apt install -y gnupg2
      
      - run:
          name: Verify files
          command: |
            curl -sSL https://secchannel.rsk.co/release.asc | gpg2 --import -
            gpg2 --verify SHA256SUMS.asc && sha256sum --check SHA256SUMS.asc
      - run:
          name: Clone rskj repo
          command: |
            git clone https://github.com/rsksmart/rskj.git
      - run:
          name: Checkout rskj repo
          command: |
            apt-get update && apt-get -y install jq
            cd rskj
            BRANCH_GET=`git ls-remote --heads origin ${CIRCLE_BRANCH}`
            BRANCH_PR_GET=`echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//" | xargs curl -s  | jq -r '.base.ref' | xargs git ls-remote --heads origin | awk -F\/ '{ print $NF }'`
            echo "Branch found on rskj repo to build (if empty none)=${BRANCH_GET}"
            echo "Branch found on rskj repo to build matching PR on powpeg (if null none)=${BRANCH_PR_GET}"
            if test -n "${BRANCH_GET}"; then
              echo "Building ${CIRCLE_BRANCH} branch from rskj"
              git checkout ${CIRCLE_BRANCH}
            else
              if [ -n "${BRANCH_PR_GET}" ] && [ "${BRANCH_PR_GET}" != "null" ]; then
                echo "Building ${BRANCH_PR_GET} PR branch from rskj"
                git checkout ${BRANCH_PR_GET}
              else
                echo "Building master branch from rskj"
              fi
            fi
      - persist_to_workspace:
                root: .
                paths:
                  - .

  build_federator_node:
    executor: fed-executor
    steps:
      - attach_workspace:
          at: /app
        
      - run:
          name: Build federator-node jar
          command: |
            echo "includeBuild('./rskj') {"  > DONT-COMMIT-settings.gradle
            echo "  dependencySubstitution {" >> DONT-COMMIT-settings.gradle
            echo "      all { DependencySubstitution dependency ->" >> DONT-COMMIT-settings.gradle
            echo "          if (dependency.requested instanceof ModuleComponentSelector" >> DONT-COMMIT-settings.gradle
            echo "                  && dependency.requested.group == 'co.rsk'" >> DONT-COMMIT-settings.gradle
            echo "                  && dependency.requested.module == 'rskj-core'" >> DONT-COMMIT-settings.gradle
            echo "                  && dependency.requested.version.endsWith('SNAPSHOT')) {" >> DONT-COMMIT-settings.gradle
            echo "              def targetProject = project(\":\${dependency.requested.module}\")" >> DONT-COMMIT-settings.gradle
            echo "              if (targetProject != null) {" >> DONT-COMMIT-settings.gradle
            echo "                  println('---- USING LOCAL ' + dependency.requested.displayName +' PROJECT ----')" >> DONT-COMMIT-settings.gradle
            echo "                  dependency.useTarget targetProject" >> DONT-COMMIT-settings.gradle
            echo "              }" >> DONT-COMMIT-settings.gradle
            echo "          }" >> DONT-COMMIT-settings.gradle
            echo "      }" >> DONT-COMMIT-settings.gradle
            echo "  }" >> DONT-COMMIT-settings.gradle
            echo "}" >> DONT-COMMIT-settings.gradle
            rm -rfv .gradle
            ./configure.sh
            ./gradlew --no-daemon dependencies
            ./gradlew --no-daemon --stacktrace clean build -x test
      - persist_to_workspace:
          root: .
          paths:
            - .

  federator-tests:
      executor: fed-executor
      steps:
        - attach_workspace:
            at: /app
        - run:
            name: Perform federator tests
            command: ./gradlew --no-daemon --stacktrace     test
        - run:
            name: Save test results
            command: |
              mkdir -p junit/
              find build/test-results -type f -name "*.xml" \
                -exec cp {} junit/ \;
            when: always
        - store_test_results:
            path: junit

        - store_artifacts:
            path: junit
            
        - persist_to_workspace:
            root: .
            paths:
              - .

  sonarqube:
    executor: sonarqube-executor
    steps:
      - attach_workspace:
          at: /app
      - run:
          name: Run SonarQube analysis
          command: |
            extra_flags=""
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              # https://community.sonarsource.com/t/no-code-or-issue-found-in-pull-request-decorations-github-circleci/8496
              git branch -f master origin/master
              # extract PR number, as PR URLs are in the form
              # https://github.com/$user/$repo/pull/$pr_number
              pr_number=${CIRCLE_PULL_REQUEST##*/}
              extra_flags="-Dsonar.pullrequest.base=master
                -Dsonar.pullrequest.branch=$CIRCLE_BRANCH
                -Dsonar.pullrequest.key=$pr_number"
            else
              extra_flags="-Dsonar.branch.name=$CIRCLE_BRANCH"
            fi
            ./gradlew sonarqube --warning-mode all --no-daemon --stacktrace --info -x build -x test \
                $extra_flags \
                -Dsonar.organization=$SONAR_ORG \
                -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                -Dsonar.host.url="$SONAR_URL" \
                -Dsonar.login="$SONAR_TOKEN"

workflows:
  version: 2
  build-and-test:
    jobs:
      - clone_rskj_repo

      - build_federator_node:
          requires:
            - clone_rskj_repo

      - sonarqube:
          requires:
            - build_federator_node

      - federator-tests:
          requires:
            - build_federator_node